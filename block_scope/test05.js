/*
    const는 상수를 위해 사용한다.
    하지만 반드시 상수만을 위해 사용하지는 않는다.

    네이밍이 적절한 상수로 선언하면 가독성과 유지보수성이 대폭 향상된다.
    const는 객체에도 사용될 수 있는데 재할당이 금지된다.
    const 변수의 타입이 객체인 경우, 객체에 대한 참조를 변경하지 못한다는 것을 의미한다.
    하지만 이때 객체의 프로퍼티는 보호되지 않는다. 
    재할당은 불가능하지만 할당된 객체의 내용(프로퍼티의 추가, 삭제, 프로퍼티 값의 변경)은
    변경할 수 있다.

    let과의 비교
    - let은 재할당이 자유로우나 const는 재할당이 금지된다.
    - const는 반드시 선언과 동시에 할당이 이루어져야 한다.
    - const는 let과 마찬가지로 블록 레벨 스코프를 갖는다.

*/
const FOO = 123;
FOO = 456; //오류 발생

{
    const FOO = 10;
    console.log(FOO); //10
}
console.log(FOO); // ReferenceError: FOO is not defined

// 10의 의미를 알기 어렵기에 가독성이 좋지 않다.
if (rows > 10) {}

// 값의 의미를 명확히 기술하여 가독성이 향상되었다.
const MAXROWS = 10;
if(rows > MAXROWS) {}

//-----------------------------------------------------
const user = {name:'Lee'};

// 재할당 금지
// user = {}; // TypeError: Assignment to constant variable.

// 객체의 내용은 변경할 수 있다.
user.name = 'Kim';

// 객체의 내용이 변경되더라도 객체 타입 변수에 할당된 주소값은 변경되지 않는다.
// 따라서 객체 타입 변수 선언에는 const를 사용하는 것이 좋다.
// 만약 명시적으로 객체 타입 변수의 주소값을 변경 해야 한다면 let을 사용한다.
console.log(user);// { name: 'Kim' }


