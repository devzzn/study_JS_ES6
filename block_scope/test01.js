/*
    var 키워드로 선언된 변수 특징
    1. 함수 레벨 스코프
    - 함수의 코드 블록만을 스코프로 인정한다. 따라서 전역함수 외부에서 생성한 변수는 모두 전역 변수이다.
    이는 전역 변수를 남발할 가능성을 높인다.
    - for 문의 변수 선언문에서 선언한 변수를 for 문의 코드 블록 외부에서 참조할 수 있다.
    2. var 키워드 생략 허용
    암묵적 전역 변수를 양산할 가능성이 크다.
    3. 변수 중복 선언 허용
    의도하지 않은 변수값의 변경이 일어날 가능성이 크다.
    4. 변수 호이스팅
    변수를 선언하기 이전에 참조할 수 있다.

    대부분의 문제는 전역 변수로 인해 발생하며 사용이 편리하다는 장점이 있지만 불가피한 상황을
    제외하고 사용을 억제해야 한다.
    전역 변수는 유효 범위(scope)가 넓어서 어디에서 어떻게 사용될 것인지 파악하기 힘들며, 
    비순수 함수에 의해 의도하지 않게 변경될 수ㄷ 있어서 복잡성을 증가 시키는 원인이 된다.
    따라서 변수의 스코프는 좁을수록 좋아서 var 키워드의 단점을 보완하기 위해 let과 const 키워드를 도입

    대부분의 프로그래밍 언어는 블록 레벨 스코프를 따르지만 자바스크립트는 함수 레벨 스코프를 따른다.
    - 함수 레벨 스코프
    함수 내에서 선언된 변수는 함수 내에서만 유효하며 함수 외부에서 참조할 수 업다.
    즉, 함수 내부에서 선언한 변수는 지역 변수이며 함수 외부에서 선언한 변수는 모두 전역 변수이다.
    - 블록 레벨 스코프
    모든 코드 블록내에서 선언된 변수는 코드 블록 내에서만 유효하며 코드 블록 외부에서는 참조할 수 없다.
    즉, 코드 블록 내부에서 선언한 변수는 지역 변수이다.

*/
var foo = 123; // 전역 변수

console.log(foo); // 123

{
  var foo = 456; // 전역 변수
}

console.log(foo); // 456
/*
    블록 레벨 스코프를 따르지 않는 var 키워드 특성상 코드 블록 내의 변수 foo는 전역 변수이다.
    코드 블록 내의 변수 foo는 전역 변수이기 때문에 전역에서 선언된 전역 변수 foo의 123을 456으로 재할당한다.
*/
let foo = 123; // 전역 변수

{
  let foo = 456; // 지역 변수
  let bar = 456; // 지역 변수
}

console.log(foo); // 123
console.log(bar); // ReferenceError: bar is not defined
/*
    let 키워드로 선언된 변수는 블록 레벨 스코프를 따른다.
    위 예제에서 코드 블록 내에 선언된 변수 foo는 블록 레벨 스코프를 갖는 지역 변수이다.
    전역에서 선언된 변수 foo와는 다른 별개의 변수이다.
    또한 bar도 블록 레벨 스코프를 갖는 지역 변수이다.
    따라서 전역에서는 변수 bar를 참조할 수 없다.
*/